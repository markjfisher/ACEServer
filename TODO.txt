* Just running the server and using Ctrl+Break seems to cause a thread issue and doesn't kill the process
	"Thread-2" #14 prio=5 os_prio=0 tid=0x000000001ff1b000 nid=0x1620 runnable [0x000000002088e000]
       java.lang.Thread.State: RUNNABLE
    	at sun.nio.ch.WindowsSelectorImpl$SubSelector.poll0(Native Method)
    	at sun.nio.ch.WindowsSelectorImpl$SubSelector.poll(WindowsSelectorImpl.java:314)
    	at sun.nio.ch.WindowsSelectorImpl$SubSelector.access$400(WindowsSelectorImpl.java:293)
    	at sun.nio.ch.WindowsSelectorImpl.doSelect(WindowsSelectorImpl.java:174)
    	at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)
    	- locked <0x000000076ba221e0> (a sun.nio.ch.Util$3)
    	- locked <0x000000076ba21940> (a java.util.Collections$UnmodifiableSet)
    	- locked <0x000000076ba1ee10> (a sun.nio.ch.WindowsSelectorImpl)
    	at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)
    	at sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:352)
    	at java.lang.Thread.run(Thread.java:748)
	>> Related?: https://bugs.openjdk.org/browse/JDK-8233185
	>> Using this does allow the process to quit: curl http://127.0.0.1:8001/stop
	>>> https://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)




* Web recording to feature files
	* Capture mouse clicks and text entry with injected JavaScript (probably use Selenium to open the page and inject the JS)
	* Match web elements in the DOM with the most exact XPath expression from a supplied dictionary of XPath expressions
	* If the mapping doesn't exist then create entries
	* Map clicks/text entry events using the remapped XPath expressions to defined step syntax
	* Create feature files
	* Watch them being recorded in the feature editor as the recording happens (append lines to the active file)
XPath helper: https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl

	* This intercepts all clicks: window.onclick = function(e){console.log('clicked'); console.dir(e); console.dir(e.toElement); }

* So using that idea this will display matched clicks on known xpath elements:

elementsToMatch = [
"/html/body/table/tbody/tr[2]/td/a" ,
"/html/body/table/tbody/tr[1]/td/a" ,
"/html/body/table/tbody/tr[3]/td/a" ,
"/html/body/table/tbody/tr[4]/td/a"
];
window.onclick = function(e){console.log('clicked'); console.dir(e); console.dir(e.toElement);
for (var i = 0 ; i < elementsToMatch.length ; i++) { console.log(elementsToMatch[i]); if ($x(elementsToMatch[i])[0] == e.toElement) { console.log("Matched with: " + elementsToMatch[i]); } }
}
window.onkeypress = function(e){ console.log("keyCode: " + e.keyCode + " keyIdentifier: " + e.keyIdentifier); }

* This will append a text line in the current active editor window:

editor.session.insert({row: editor.session.getLength() , column:0} , "\n" + "This is a line I inserted");

* At this stage using Selenium to update the JavaScript hooks and xpath arrays means Selenium can be used to get event information back from the browser.
* The ACEServer GUI can be used to initiate Selenium control of a particular Selenium controlled feature file.
* The ACEServer and CukesPlus callback can return new lines to add to the feature without reloading or disturbing editing of the feature file at runtime.
* The *.debug.json file can be used to supply lines to append in "toAppend"
* When CukesPlus detects a load file request it can remove amy "toAppend" lines in the debug.json reply.



* Minimise src/resources by stripping out unwanted files.



* Make generic so it can be used with other Cucumber related projects.



* Optional status window to show any build output or progress messages.



* Show the status of the saved document.



* Optional save before choosing any of the "run" buttons.



* Show a warning if no timely reply is received from the web browser.
