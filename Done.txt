Add JavaScript code to read regex definitions from an array (inserted into the returned data server side for ace-builds-master/demo/autocompletion.html) and autocomplete with that data.
* ace-builds-master/gherkin-steps.js is read to find the step matches.
    It can be read from the current directory, src/main/resources, target/ or finally the resources


Add ability to save the current feature file.
*Ctrl+S
A request to save will send a PUT request to "http://localhost:8000/data/t.feature" containing the data to save.
The path "t.feature" is relative to the Java code current directory.



This URL parameter will set the filename to try to read and save when using the server: filename=t2.feature



Add ability to load a feature file from if there is a URL parameter like "http://localhost:8000/ace-builds-master/kitchen-sink.html?filename=foo/filename.feature".
The "foo/filename.feature" file is relative to the Java code current directory, not its resource directory.



MPi: TODO: Do not allow directory scanning to parents, this means removing ".." and making sure "/" is not the first in the path



If the system property "com.replicanet.ACEServer.debug.requests" is set then the URL requests are displayed



Reduce to gherkin language, remove irrelevant options from the left hand pane.



Remove single word completers? http://stackoverflow.com/questions/26991288/ace-editor-autocompletion-remove-local-variables
    See comment: // This removes hints for single words



Create file edit box and button



Added ACEServerCallback interface and ACEServer.addCallback() , ACEServer.removeCallback()



Added optional line highlighting. If the file "<original filename>.debug.json" exists then it will be parsed and create markers.
    This happens after the main document is loaded.
    The CSS contains new styles passing_step_line and failing_step_line that can be used by the JSON line highlighter
    Example format:
        {
          "lines" : [
            { "type" : "passed_step_line" ,   "from" : 2 ,    "to" : 2} ,
            { "type" : "failed_step_line" ,   "from" : 3 ,    "to" : 3} ,
            { "type" : "undefined_step_line" ,   "from" : 4 ,    "to" : 4} ,
            { "type" : "pending_step_line" ,   "from" : 5 ,    "to" : 5} ,
            { "type" : "passed_step_line" ,   "from" : 8 ,    "to" : 8} ,
            { "type" : "pending_step_line" ,   "from" : 11 ,    "to" : 11} ,
            { "type" : "undefined_step_line" ,   "from" : 14 ,    "to" : 14} ,
            { "type" : "failed_step_line" ,   "from" : 17 ,    "to" : 17}
          ]
        }



Added InputStream ACEServerCallback.beforeGet(String uri);
    If an InputStream is returned then dynamic runtime data can be used instead of file data. For example:

        public InputStream beforeGet(String uri)
        {
            // An example of what to do to return runtime generated data
            if (uri.contains("moo.feature"))
            {
                String exampleString = "Hello world\n";
                return new ByteArrayInputStream(exampleString.getBytes(StandardCharsets.UTF_8));
            }
            return null;
        }

